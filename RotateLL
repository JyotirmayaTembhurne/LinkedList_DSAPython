# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or k == 0:
            return head
        current = head
        n = 0
        while current:
            n+=1
            current = current.next
        if n == k:
            return head
        k = k % n
        if k == 0:
            return head
        dist = n-k
        first = head
        for i in range(dist-1):
            first = first.next
        second = first.next
        first.next = None
        tail = second
        while tail.next:
            tail = tail.next
        tail.next = head
        return second
        
        

        
        
        
        

